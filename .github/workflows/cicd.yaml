name: ekg CI/CD

on:
  push:
    branches:
      - main

jobs:
  build:
    runs-on: ubuntu-latest

    steps:
      - name: Checkout code
        uses: actions/checkout@v2

      # Cache Docker layers to speed up subsequent builds
      - name: Cache Docker layers
        uses: actions/cache@v2
        with:
          path: /var/lib/docker
          key: docker-${{ runner.os }}-${{ hashFiles('**/Dockerfile') }}
          restore-keys: docker-${{ runner.os }}-

      - name: Build Docker image
        run: docker build -t ${{ secrets.DOCKER_USERNAME }}/ekg:$GITHUB_RUN_NUMBER .


      - name: Login to Docker Hub
        uses: docker/login-action@v3
        with:
          username: ${{ secrets.DOCKER_USERNAME }}
          password: ${{ secrets.DOCKER_PASSWORD }}

      - name: Push Docker image to Docker Hub
        run: docker push ${{ secrets.DOCKER_USERNAME }}/ekg:$GITHUB_RUN_NUMBER

  deploy:
    needs: build
    runs-on: ubuntu-latest

    steps:
      - uses: actions/checkout@v2

      - name: Configure SSH
        uses: webfactory/ssh-agent@v0.9.0
        with:
          ssh-private-key: ${{ secrets.SSH_PRIVATE_KEY }}

      - name: Deploy to EC2
        run: |
          ssh -o StrictHostKeyChecking=no  dev@${{ secrets.EC2_IP }} << 'EOF'
            # Stop and remove any existing container
            if docker ps -a --format '{{.Names}}' | grep -q '^ekg$'; then
            docker stop ekg || true
            docker rm ekg || true
            docker image prune -f --filter "reference=*ekg*" || true

          fi 


            # Pull the new image
            docker pull ${{ secrets.DOCKER_USERNAME }}/ekg:${{ github.run_number }}

            # Run the new container
            docker run -d -p 9700:8000 --env-file /home/dev/ekg/.env --name ekg ${{ secrets.DOCKER_USERNAME }}/ekg:${{ github.run_number }}
          EOF